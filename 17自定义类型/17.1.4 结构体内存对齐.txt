怎么计算结构体的大小了？
它的大小并非单纯将所有变量的大小加起来
要考虑到结构体的内存对齐

结构体的对齐规则：
1.第一个成员在与结构体变量偏移量为0的地址处
2.其它成员变量要对齐到某个数字( 对齐数 ) 的整数倍的地址(就起始位置而言的，也就是偏移量)处
对齐数 = 编译器默认的一个对齐数 与 该成员大小的较小值
*数组成员的对齐数是数组类型的大小，如 char[5] 的对齐数是1
*vs中默认的值为 8
*gcc中没有默认对齐数，直接用成员大小作对齐数
3.结构体总大小为最大对齐数( 每个成员变量都有一个对齐数 )的整数倍
4.如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数 (含嵌套结构体的对齐数) 的整数倍

举例：
结构体的声明
struct Stu
{
	char name[20];
	char tele[12];
	char sex[10];
	int age;
};
结构体的大小
printf( "%d ", sizeof(Stu) )；// 输出 48

为什么要有内存对齐
大部分的参数资料都是如是说的：
1.平台原因(移植原因):不是所有的硬件平台都能访问任意地址上的任意数据的;某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。
2性能原因:数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于,为了访问未对齐的内存，处理器需要作两次内存访问;而对齐的内存访问仅需要一次访问。
总体来说：结构体的内存对齐是拿空间来换取时间的做法

设计结构体时，要考虑内存对齐来节省空间
尽量让占用空间小的成员集中在一起

修改默认对齐数
利用 #pragma 这个预处理指令
#pragma pack(num)  	// 设置默认对齐数为 num (作用于这条指令下的结构体声明)
#pragma pack() 		// 取消设置的默认对齐数   (作用于这条指令下的结构体声明)
*注意：一般设置为 2^n
什么是位段？
位段的"位"是二进制位的意思
位段的声明和结构体是类似的，有几个不同：
1.位段的成员必须是整形，如 int, unsigned int  signed int 或者 char
2.位段的成员名后边有一个冒号和一个数字, 数字为分配的bit位数量，数量不能大于该类型实际上的bit位数量 (比如int类型的成员不能大于32).
3.一般而言(强调是一般而言),位段的所有成员变量类型都用相同的
4.位段不存在内存对齐

如下，定义了一个位段
struct A
{
	int _a:2;
	int _b:5;
	int _c:10;
	int _d:30;
};
它的大小为
printf("%d\n", sizeof( struct A )); // 输出 8

根据位段的声明，这个位段应该占用 47bit，不到6字节，但是为什么显示有8字节大小？

位段的内存分配：
1.位段的成员可以是 int, unsigned int  signed int 或者 char
2.位段的空间上是按照需要以4个字节( int )  或者1个字节( char ) 的方式开辟的
3.位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段

上述例子中由于成员的类型，先开辟了一个字节，创建 _a_b_c 后发现只剩下 15bit 装不下 _d
vs编译器会浪费剩下的 15bit ,再创建一个一个字节创建 _d,并浪费剩下的 2bit
所以最终是 8 字节

值得注意的是C语言标准并没有规定位段成员占用空间时先占低位，还是先占高位
每个编译器对此的处理不一样，因此使用位段会造成可移植性低的问题
*vs2010经测试，先占低位
除此以外还很很多问题，如果是问题的总结
位段的跨平台问题：
1.int位段被当成有符号数还是无符号数是不确定的。
2.位段中最大位的数目不能确定。( 16位机器最大16，32位机器最大32，写成27，在16位机器会出问题。)
3.位段中的成员在内存中从左向右有分配,还是从右向左分(高低位分配顺序)配标准尚未定义。
4.当一个结构包含两个位段，第二个位段成员比较大，无法容纳于第一个位段剩余的位时，是舍弃剩余的位还是利用，这是不确定的。

位段的实际用途：
1.用于网络的数据传输( 如ip数据报 )
2.其它
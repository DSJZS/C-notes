函数指针--即指向函数的指针
函数声明之时，便占用了一块空间，对应的有了地址
函数名 和 &函数名 均为函数的地址

如果想创建一个函数指针，要在创建时写明函数的返回类型，参数列表(写明参数类型即可，参数名可省略)
同时要将 * 括起来，避免与函数的声明弄混
如有一个函数
int Add( int x, int y)
{	return x+y;	}
创建它的函数指针p
	int (*p)( int, int) = Add;

使用函数指针时对其解引用操作或者直接不解引用将其当初函数即可使用指向的函数(实际上函数指针前面放无数个*都可以，毕竟实际上没有什么用)
如
	printf("%d\n", p(2, 5)); // 方法一
或
	printf("%d\n", (*p)(2, 5)); // 方法二
结果均为 7

举例：
	( *(void(*)())0 )();
	void(*signal(int, void(*)(int)))(int);
第一个例子是把 0 常量的类型从 int 强制类型转换改为一个函数指针( 指向的函数无参数，返回类型为void )，之后对其进行解引用操作调用这个地址为0的函数

第二个例子是一个函数声明，告诉编译器有一个函数 signal ，它的参数是 int 和一个函数指针( 该指针指向一个参数为 int，返回类型为 void 的函数 )，返回类型是一个函数指针( 该指针指向一个参数为 int，返回类型为 void 的函数 )

我们可以用typedef简化操作
如将上诉的第二个例子中的 void(*)(int) 简化为 pfun_t
typedef void(*pfun_t)(int);
pfun_t signal( int, pfun_t);

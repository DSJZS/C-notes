单目操作符(只有一个操作数的操作符)：
!	逻辑反操作
-	负值
+	正值
&	取地址
sizeof	操作数的类型长度(单位为字节)
~	对一个数的二进制按位取反
--	前置，后置--
++	前置，后置++
*	间接访问操作(解引用操作符)
(类型)	强制类型转换

1. ！
真变假(0)，假(0)变真(默认为 1 )
如	int a = 10;
	printf("%d", !a); // 输出 0

2. -
使正数变负数，负数变正数
如	int a = -10;
	printf("%d", -a); // 输出 10

3. +
使正数变正数，负数变负数(没什么卵用)

4.&
取出对象的地址
如	int a = 10;
	printf("%p", &a); // 输出 a的地址

5. sizeof
操作数的类型长度(单位为字节)
如	int a = 10;
	printf("%d", sizeof(a)); // 输出 4
*注意：sizeof后的表达式不会执行
如	int a = 10;
	printf("%d", sizeof(a += 10)); // 输出 4
	printf("%d", a); // 输出 10
*注意：sizeof后除了类型，可以省略括号
如	sizeof a;  // right
	sizeof int;// error

6. ~	
对一个数的二进制序列(正原负补)按位取反
如	int a = 10;	  
	// a - 00000000000000000000000000001010
	printf("%d", ~a); // 输出 5
	//~a - 11111111111111111111111111110101

7. --	
前置，后置--
前置时先--，后使用；后置时先使用，后--

8. ++	
前置，后置++
前置时先++，后使用；后置时先使用，后++

9. *
利用地址进行间接访问操作(解引用操作)
如	int a = 10;
	int* p = &a;
	printf("%d", *p); // 输出 10

1.(类型)
强制转换操作数的类型
如	int a = (int)3.14;
	printf("%d", a); // 输出 3
	
#define是一个预处理指令
它有多个用处

1. #define 定义标识符(无参宏)
{
语法:
#define name stuff
如
#define MAX 100
预编译阶段，编译器会将MAX标识符替换成 100
#define STR "hello world"
预编译阶段，编译器会将STR标识符替换成 "hello world"
#define CASE break;case
预编译阶段，编译器会将CASE标识符替换成 break;case
*注意：建议#define指令末尾不要加上 ;
}

2.#define 定义宏(带参宏)
{
#define机制包括了一个规定 ,允许把参数替换到文本中 ,这种实现通常称为宏( macro )或定义宏( define macro )。
宏的声明方式：
#define name( parament-1ist ) stuff  其中的parament-list是一个由逗号隔开的符号表，它们可能出现在stuff中。
注意:参数列表的左括号必须与name紧邻。如果两者之间有任何空白存在，参数列表就会被解释为 stuff 的一部分。
如
#define ADD(x,y) x+y
如果输入 ADD(1,2) ，在预编译阶段，编译器会将 ADD(1,2)  替换成 1+2    

同时注意:输入的表达式不会进行计算等，会直接被当作参数传入，如下
#define SQUARE(x) x*x
如果输入 SQUARE(5+1) ，在预编译阶段，编译器会将 SQUARE(5+1)  替换成 5+1*5+1    
所以宏的stuff部分最好用()按需求将一些内容包括起来
如上面的宏应该这样写
#define SQUARE(x) ( (x) * (x) )
}


#define替换规则
{
在程序中扩展#define定义符号和宏时，需要涉及几个步骤。
1.在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换。
2.替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被他们的值替换。
3.最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程。
注意:
1.宏参数和#define定义中可以出现其他#define定义的变量。但是对于宏，不能出现递归。
2.当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索(如MAX，不能替换 "MAX\n" 中的MAX)。
}

带副作用的宏参数
{
当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候就可能出现危险，导致不可预测的后果。副作用就是表达式求值的时候出现的永久性效果。例如:
x+1;//不带副作用
X++;//带有副作用
举例：有如下这么个宏
#define MAX(X,Y) ( (X)>(Y)?(X):(Y) )
接下来有两个变量
int a = 10;
int b = 20;
我们要打印它们两个加一之后的最大值，之后分别打印它们的值
1.使用 +1 
	printf("max = %d\n", MAX(a+1,b+1)); // 输出21
	printf("a = %d\n", a); //输出 10
	printf("b = %d\n", b); //输出 20
2.使用++
	printf("max = %d\n", MAX(a++,b++)); // 输出21
	printf("a = %d\n", a); //输出 11
	printf("b = %d\n", b); //输出 22
可以看到第二种情况，b增加了2次，有可能会对接下来程序执行造成麻烦，如果没有特殊要求，建议使用第一种方式
}

命名预定：
一般来讲函数的宏的使用语法很相似，所以语法本身帮我们区分二者，那我们平时的一个习惯是：
把宏名全部大写，函数名不要全部大写

#define作用域
不管是在某个函数内，还是在所有函数之外，作用域都是从定义开始直到整个文件结尾
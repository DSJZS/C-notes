宏和函数对比
宏通常被应用于执行简单的运算。比如在两个数中找出较大的一个。
#define MAX(a，b) ((a)>(b)?(a):(b))

那为什么不用函数来完成这个任务?原因有二∶
1.用于调用函数和从函数返回的代码可能比实际执行这个小型计算工作所需要的时间更多。所以宏比函数在程序的规模和速度方面更胜一筹。
2.更为重要的是函数的参数必须声明为特定的类型。所以函数只能在类型合适的表达式上使用。反之这个宏可以适用于整形、长整型、浮点型等可以用来来比较的类型。宏是类型无关的。

当然和宏相比函数也有劣势的地方:
1.每次使用宏的时候，一份宏定义的代码将插入到程序中。除非宏比较短，否则可能大幅度增加程序的长度。
2.宏是没法调试的。
3.宏由于类型无关，也就不够严谨。
4.宏可能会带来运算符优先级的问题，导致程序容易出现错。

宏有时候可以做函数做不到的事情。比如:宏的参数可以出现类型但是函数做不到。
如	#define SIZEOF(type) sizeof(type)
又如	#define MALLOC(num,type)	(type*)malloc(num*sizeof(type))

命名约定
一般来讲函数的宏的使用语法很相似。所以语言本身没法帮我们区分二者。那我们平时的一个习惯是:
把云名全部大写函数名不要全部大写

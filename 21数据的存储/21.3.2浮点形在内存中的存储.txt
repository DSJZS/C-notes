根据国际标准IEEE 754规定，任何一个二进制浮点数V可以表示成下面的形式：
-	V = (-1)^S * M * 2^E
-	(-1)^S 表示符号位,当S=0,V为正数;当S=1,V为负数
-	M表示有效数字,大于等于1,小于2
-	2^E 表示指数位,E是一个无符号正数

举例：十进制的 5.0, 写成二进制是 101.0, 相当于 1.01x2^2
按照上述公式 S=0,, M=1.01, E=2
类似, 十进制的-5.0, 写成二进制是-101.0, 相当于-1.01x2^2
按照上述公式 S=1,, M=1.01, E=2

怎么存储？
IEEE 754规定:
对于32位的浮点数,最高的1位是符号位S,接着的8位是指数E,剩下的23位为有效数字M
S(1bit)	E(8bit)		M(23bit)
对于64位的浮点数,最高的1位是符号位S,接着的11位是指数E,剩下的52位为有效数字M
S(1bit)	E(11bit)	M(52bit)

* IEEE 754对有效数字M和指数E有特殊规定规定:
1.对有效数字M：
由于 1≤M＜2,写作 1.xxxxxx, 所以默认 M 的第一位总是为 1,因此为节省空间,保存时只保存后面的 xxxxxx,省略前面的 1,
等读取之时再加上
存放顺序是 xxxxxx 放前面,多余的bit位全为0且放在 xxxxxx后面
这样做是为了区分小数点后有几个0
如float类型的二进制数 1.01 有效数字M只存储 01000000000000000000000
01放在前面，告知了二进制数 1.01 小数点后只有一个0

2.对指数E：
-存放时-
E 是一个无符号正数,因此当E为8位时,取值范围是0~255
当E为11位时,取值范围是0~2047
但是科学计算法中,指数是可以为负数的
因此IEEE 754规定,存入内存时E的真实值必须加上一个中间数
当E为8位时,中间数是 127
当E为11位时,中间数是 1023
如 2^10 的E是 10,保存在32为浮点数时,必须加上中间数保存为
10+127=137,即 10001001
|
-取出时-
分三种情况
①E不全为0或不全为1
取出时，E - 127(或1023) 得到正式值, 再在有效数字 E前加上第一位的 1,还原为 1.xxxxxx
②E全为0
由规则可知 E全为0时,正常情况下的E的真实值为-127(或者-1023),作为指数,表示这个浮点数是一个极小的、约等于 0的数字
人们因此特殊规定当E全为0时
取出时指数E等于1-127(或1-1023)即为真实值(也就是只能为-126或者-1022)
有效数字M不再加上第一位的1,还原为 0.xxxxxx,
这样做是为了表示±0和接近于0的很小数字
③E全为1
由规则可知 E全为1时,正常情况下的E的真实值为128(或者1024),作为指数,表示这个浮点数是一个极大的、接近无穷的数字
人们因此特殊规定当E全为1时
表示±无穷大
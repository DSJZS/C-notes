柔性数组（flexible array)
C99标准中提到，结构体中的最后一个元素允许是未知大小的数组，这叫做『柔性数组』成员。
需要声明其大小为 0( 或者不指明大小 ), 并且其前面至少要有一个成员

例如:
typedef struct st_type
{
int i;
int a[0];  //柔性数组成员
}type_a;

声明后使用关键字sizeof测量结构体大小
	printf("%d", sizeof(struct st_type)); // 输出 4
说明柔性数组的大小不计入结构体大小

可以通过开辟内存空间来觉得柔性数组的长度
struct st_type* ps = (struct st_type*)malloc(sizeof(struct st_type)+5*sizeof(int));
如上面，柔性数组长度为 5
同时也可以利用 realloc函数 来修改分配给指针ps的内存空间来改变柔性数组大小

柔性数组的特点:
1.结构中的柔性数组成员前面必须至少一个其他成员。
2.sizeof返回的这种结构大小不包括柔性数组的内存。
3.包含柔性数组成员的结构用malloc()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。

优点：
1.方便管理，一次 free函数 即可释放
2.减少内存碎片产生
3.提高内存访问效率

排序元素为任何类型的数组
头文件: stdlib.h

函数声明：
void qsort(void *base, size_t num, size_t  width, int (*compare)(const void *, const void*));

返回值：没有返回值

调用格式:
qsort( base, num, width,  compare)

说明：
base		-- 指向要排序的数组的第一个元素的指针。
num		-- 由 base 指向的数组中元素的个数。
width		-- 数组中每个元素的大小，以字节为单位。
compare 	-- 用来指向比较两个元素的函数的指针。
		    要求这个函数的类型为 int()(const void*, const void*)
		    如  int compare(const void * elem1, const void * elem2);
		    如果compare返回值小于0（< 0），那么elem1所指向元素会被排在elem2所指向元素的前面 
		    如果compare返回值等于0（= 0），那么elem1所指向元素与elem2所指向元素的顺序不确定 
		    如果compare返回值大于0（> 0），那么elem1所指向元素会被排在elem2所指向元素的后面
qsort函数的排序方法是quick sort(快速排序)
按上述要求完成compare函数的定义，数组在最终会是升序
如果想降序就把返回值大于0和小于0的要求反着来

举例：

int compare(const void* p1,const void* p2)
{
	return (*(int*)p1 - *(int*)p2);
}
int main()
{
	int arr[10] = {5,4,6,8,9,7,1,3,2};
	int sz = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]); // 输出 5 4 6 8 9 7 1 3 2
	}
	printf("\n");
	qsort(arr,sz,4,compare);
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]); // 输出 1 2 3 4 5 6 7 8 9
	}
	printf("\n");
	return 0;
}




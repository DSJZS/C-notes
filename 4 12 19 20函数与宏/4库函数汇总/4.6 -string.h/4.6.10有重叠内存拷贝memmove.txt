从一个字符串复制n个字符到另一个字符串
头文件: string.h

函数声明：
void *memcpy(void * dest, const void * src , size_t n);

返回值：
该函数返回一个指向目标存储区 dest 的指针。

调用格式:
memcpy(  dest,   src ,   n);

说明：
dest 	       	-- 	指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。
src	    	-- 	指向要复制的数据源，类型强制转换为 void* 指针。
n		 --	 要被复制的字节数。

与memcpy类似，但是在重叠内存块这方面，memmove() 是比 memcpy() 更安全的方法。如果目标区域和源区域有重叠的话，memmove() 能够保证源串在被覆盖之前将重叠区域的字节拷贝到目标区域中，复制后源区域的内容会被更改。如果目标区域与源区域没有重叠，则和 memcpy() 函数功能相同。

举例：
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	memmove(arr+2,arr,sizeof(arr)/2);
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]); // 输出 1 2 1 2 3 4 5 8 9 10
	}

注意：
1.C语言标准规定 memmove函数 处理重叠的内存拷贝 ( 不重叠的内存拷贝由memcpy函数完成即可 )
2. VS编译器下 memcpy函数 和 memmove函数作用一样，也一样可以拷贝重叠的内存( 超额完成标准 )

建议：
有重叠内存块问题时，建议用memmove函数，而不是memcpy函数

自己编写的版本：
void* my_memmove(void * dest, const void * src , size_t n)
{
	void* ret = dest;
	if((int)dest<(int)src)
		while(n--)
		{
			*(char*)dest = *(char*)src;
			++(char*)dest;	//dest = (char*)dest + 1;
			++(char*)src;	//src = (char*)src + 1; 
		}
	else
		while(n--)
			*((char*)dest+n)= *((char*)src+n);
	return ret;
}

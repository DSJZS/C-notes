在一个字符串中查找标记( 注意，会修改该字符串所以建议使用临时拷贝的可修改字符串 )
头文件:  string.h

函数声明：
char *strtok(char *str, const char * sep);

返回值：
如果有标记	，则返回标记的位置
如果没有标记，则返回NULL，也就是空指针

调用格式:
strtok( str,   sep);

说明：
str 	-- 一个字符串，它包含了0个或者多个由sep字符串中一个或者多个分隔符分割的标记
sep 	-- 包含分隔符的字符集合(也就是一个字符串，里面每个字符都是分隔符)。

strtok函数找到str中的下一个标记，如果找到，将其变为\0，无论找没找到都返回开始查找时查找的第一个字符的指针。(strtok函数会改变被操作的字符，所以一般会使用临时拷贝的可修改字符串)
strtok函数的第一个参数不为NULL，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置
strtok函数的第一个参数为NULL，函数将在同一个字符串中被保存的位置开始，查找下一个标记
如果字符串中不存在更多的标记，则返回NULL指针

如 str字符串为 "123456@we.com" sep字符串为 "@."
使用 strtok( str, sep); 后，strtok会从首元素开始寻找 '@' 和 '.'  ,   本例中 '@' 会被替换为 '\0', 并且返回 '1' 的地址
再次使用 strtok( NULL, sep)后， strtok会从 'w' 开始寻找'@' 和 '.'   ，  本例中 '.' 会被替换为 '\0', 并且返回 'w' 的地址
再次使用 strtok( NULL, sep)后， strtok会从 'c' 开始寻找'@' 和 '.'   ，  本例中由于找不到分隔符, strtok 会返回 'c' 的地址

举例：
	char str[] = "123456@we.com";
	char sep[] = "@.";
	printf("%s\n", strtok(str,sep));  		 //	输出 123456
	printf("%s\n", strtok(NULL,sep));	 //	输出 we
	printf("%s\n", strtok(NULL,sep)); 	//	输出 com
	printf("%s\n", strtok(NULL,sep)); 	//	 (NULL) 

注意：
1. strtok函数会改变被操作的字符，所以一般会使用临时拷贝的可修改字符串
2. sep字符串中的分隔符不分先后顺序，也并非一次性的

建议：
可以与 for语句 配合，如举例部分的列子可这么写
char* tmp = NULL;
for( tmp = strtok(str,sep) ; tmp != NULL ; tmp =  strtok(NULL,sep))
	printf("%s\n", tmp);

自己编写的版本：
char* my_strtok(char*str, const char* sep)
{
	static char* ret = NULL;
	char *s1,*s2;
	if(str != NULL)
		ret = str;
	else if( (str==NULL) && (*ret=='\0') )
		return NULL;
	s1 = ret;
	while(*s1 != '\0')
	{
		s2 = (char*)sep;
		while(*s2 != '\0')
		{
			if(*s1 == *s2)
			{
				char* tmp = ret;
				*s1 = '\0';
				ret = s1+1;
				return tmp;
			}
			s2++;
		}
		s1++;
	}
	if(*s1 == '\0')
	{
		char* tmp = ret;
		ret = s1;
		return tmp;
	}
	return NULL;
}
